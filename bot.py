import asyncio
import nest_asyncio
import emoji
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Bot

# üëá Flask –∏ Thread ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø–∏–Ω–≥–∞
from flask import Flask
from threading import Thread

nest_asyncio.apply()

OWNER_ID = 7774584060

WELCOME_MESSAGE = (
    "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
    "–Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π SpamBlock.\n"
    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–æ–µ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É.\n\n"
    "‚ö†Ô∏è –í–∞–∂–Ω–æ: –æ–Ω —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å.\n\n"
    "‚úâÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ –æ—Ç–ø—Ä–∞–≤—å!"
)

forwarded_messages = {}

def is_emoji_only(text: str) -> bool:
    text = text.strip()
    return all(char in emoji.EMOJI_DATA or char.isspace() for char in text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_MESSAGE)

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    user = update.effective_user

    if not msg:
        return

    if user.id == OWNER_ID and msg.reply_to_message:
        replied_msg_id = msg.reply_to_message.message_id

        if replied_msg_id in forwarded_messages:
            recipient_id = forwarded_messages[replied_msg_id]
            response_text = msg.text.strip() if msg.text else ""

            reply_text = (
                f"üì® *–û—Ç–≤–µ—Ç –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞:*\n\n"
                f"{response_text}"
            )
            try:
                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=reply_text,
                    parse_mode="Markdown"
                )
                await msg.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
            except Exception as e:
                await msg.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n{e}")
        else:
            await msg.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç—å—Ç–µ –∏–º–µ–Ω–Ω–æ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if user.id != OWNER_ID:
        try:
            forwarded_message = await msg.forward(chat_id=OWNER_ID)
            forwarded_messages[forwarded_message.message_id] = user.id

            if msg.text:
                if is_emoji_only(msg.text):
                    msg_type = "üì¶ –≠–º–æ–¥–∑–∏"
                else:
                    msg_type = "üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            elif msg.animation:
                msg_type = "üéûÔ∏è GIF / Premium Emoji"
            elif msg.sticker:
                msg_type = "üñºÔ∏è –°—Ç–∏–∫–µ—Ä"
            elif msg.voice:
                msg_type = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            elif msg.video_note:
                msg_type = "üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
            elif msg.video:
                msg_type = "üé¨ –í–∏–¥–µ–æ"
            elif msg.photo:
                msg_type = "üì∑ –§–æ—Ç–æ"
            else:
                msg_type = "üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"

            sender_info = (
                f"*–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"*–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:* {msg_type}\n\n"
                f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ:*\n"
                f"‚Ä¢ ID: `{user.id}`\n"
                f"‚Ä¢ Username: @{user.username if user.username else '–Ω–µ—Ç username'}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )

            await context.bot.send_message(chat_id=OWNER_ID, text=sender_info, parse_mode="Markdown")
            await msg.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É!")

        except Exception as e:
            await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü—É:\n{e}")

# üëá Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ Bot is running!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    thread = Thread(target=run)
    thread.start()

async def send_uptime_mention(bot: Bot, chat_id: int):
    me = await bot.get_me()
    user_id = me.id
    bot_username = me.username

    text = f'UptimeRobot: –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ [@{bot_username}](tg://user?id={user_id})'
    try:
        await bot.send_message(chat_id=chat_id, text=text, parse_mode='Markdown')
        print("‚úÖ UptimeRobot mention sent")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è UptimeRobot:\n{e}")

async def main():
    TOKEN = "7196108749:AAF5nzJLyohQKWq5LHJe3eKSL_diTCL20mI"
    CHAT_ID_UPTIME = OWNER_ID  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π —á–∞—Ç ID –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è

    keep_alive()  # ‚¨ÖÔ∏è –ó–∞–ø—É—Å–∫ Flask –ø–µ—Ä–µ–¥ Telegram-–±–æ—Ç–æ–º

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(MessageHandler(filters.ALL & (~filters.COMMAND), handle_message))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ UptimeRobot –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    await send_uptime_mention(app.bot, CHAT_ID_UPTIME)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
